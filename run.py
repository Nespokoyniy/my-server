# import uvicorn
# import os


# def start_server():
#     uvicorn.run(app="app.main:app", host="0.0.0.0", port=8000, reload=True)


# def update():
#     os.system("pip freeze > requirements.txt")


# def alembic_check():
#     os.system('alembic revision --autogenerate -m "new migration"')
#     os.system("alembic upgrade head")


# if __name__ == "__main__":
#     alembic_check()
#     update()
#     start_server()

import uvicorn
import os
import subprocess
import sys


def start_server(host: str = "0.0.0.0", port: int = 8000, reload: bool = True):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å Uvicorn."""
    uvicorn.run(app="app.main:app", host=host, port=port, reload=reload)


def update_requirements():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç requirements.txt, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    result = subprocess.run(["pip", "freeze"], capture_output=True, text=True)
    current = result.stdout

    if os.path.exists("requirements.txt"):
        with open("requirements.txt", "r") as f:
            existing = f.read()
        if current == existing:
            print("‚úÖ requirements.txt —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω.")
            return

    with open("requirements.txt", "w") as f:
        f.write(current)
    print("üì¶ requirements.txt –æ–±–Ω–æ–≤–ª–µ–Ω.")


def run_migrations():
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π Alembic (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–º –≤—ã–∑–æ–≤–µ)."""
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π...")
    try:
        subprocess.run(["alembic", "upgrade", "head"], check=True)
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        sys.exit(1)


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä —Ä–∞–∑–¥–µ–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if len(sys.argv) > 1:
        command = sys.argv[1]
        if command == "start":
            start_server()
        elif command == "migrate":
            run_migrations()
        elif command == "update":
            update_requirements()
        else:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: start, migrate, update")
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        start_server()